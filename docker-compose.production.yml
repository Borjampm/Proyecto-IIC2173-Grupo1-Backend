version: '3.3'

services:
  listener:
    image: public.ecr.aws/p3t1e0p3/grupo1-listener:latest
    container_name: Listener
    ports:
      - "${PORT_LISTENER}:${PORT_LISTENER}"
    volumes:
      - ./Listener/src:/Listener/src
    networks:
      - back-network
    restart: unless-stopped
    environment:
      PORT_LISTENER: ${PORT_LISTENER}
      API_URL: ${API_URL}

  api:
    image: public.ecr.aws/p3t1e0p3/grupo1-api:latest
    container_name: API
    ports:
      - "${PORT_API}:${PORT_API}"
    volumes:
      - ./API/src:/API/src
    networks:
      - back-network
    depends_on:
      - db
      - listener
    restart: unless-stopped
    environment:
      PORT_API: ${PORT_API}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      FRONT_URL: ${FRONT_URL}

  db:
    image: postgres:latest
    container_name: Database
    restart: always
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - back-network
    volumes:
      - db-volume:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}

    redis-broker:
      image: redis:7
      container_name: Broker-Redis
      volumes:
        - .workers/redis/redis.conf:/usr/local/etc/redis/redis.conf
      networks:
        - back-network

  job-master:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: JobsMaster
    command: uvicorn jobmaster.jobsmaster:app --reload --host 0.0.0.0 --port ${PORT_JOBSMASTER}
    volumes:
      - ./workers:/workers
    ports:
      - ${PORT_JOBSMASTER}:${PORT_JOBSMASTER}
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    depends_on:
      - redis-broker
    networks:
      - back-network

  workers:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: Workers
    deploy:
      replicas: ${REPLICAS_WORKERS}
    command: celery -A worker.consumer.celery_app worker --loglevel=INFO --purge --concurrency=1
    volumes:
      - ./workers:/workers
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
      API_URL: ${API_URL}
    depends_on:
      - job-master
    networks:
      - back-network

  dashboard:
    build:
      context: ./workers
      dockerfile: Dockerfile
    container_name: Dashboard
    #Aunque se ejecute en 0.0.0.0, hay que reemplazar ese valor por localhost, http://localhost:5555/dashboard/
    command: bash -c "sleep 10; celery -A worker.consumer.celery_app flower --loglevel=INFO --url_prefix=dashboard --address=0.0.0.0 --port=${PORT_DASHBOARD};"
    ports:
      - ${PORT_DASHBOARD}:${PORT_DASHBOARD}
    volumes:
      - ./workers:/opt/
    depends_on:
      - job-master
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - back-network

networks:
  back-network:
    driver: bridge

volumes:
  db-volume:
